{"version":3,"sources":["webpack://whatstpl/webpack/universalModuleDefinition","webpack://whatstpl/webpack/bootstrap","webpack://whatstpl/./node_modules/whatstpl-toolkit/dist/utils.js","webpack://whatstpl/./node_modules/whatstpl-toolkit/dist/errors.js","webpack://whatstpl/./node_modules/whatstpl-toolkit/dist/index.js","webpack://whatstpl/external \"fs\"","webpack://whatstpl/./src/module.ts","webpack://whatstpl/./node_modules/whatstpl-toolkit/dist/parser.js","webpack://whatstpl/./src/index.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","dirname","path","replace","lastIndexOf","length","substring","Separator","basename","filename","extname","dir","match","normalizePath","parts","split","splice","join","getCwd","IsBrowser","location","protocol","host","pathname","process","cwd","isAbsPath","window","XMLHttpRequest","platform","escape","html","String","baseName","getAbsPath","getObjectValues","obj","res","prop","push","getFunctionBodyOffset","fn","fnStr","toString","indexOf","defArr","slice","inNewLine","column","line","UnclosedTagError","SyntaxError","[object Object]","message","super","__export","require","whatstpl_toolkit_1","Module","children","sourceMap","id","code","locals","contents","cache","_module","_exports","default","_require","props","keys","Function","Params","err","stacks","stack","replaceError","createFunction","Error","sourceMaps","EvalRE","RequireRE","FnCallRE","FnBodyOffset","getImportFilename","lineCode","matches","codeArr","funcName","getFuncName","_codeArr","re","RegExp","parseInt","reverse","pair","source","map","node","errors_1","utils_1","AttrRe","Parser","listeners","outputTags","OutputTags","blockTags","BlockTags","renewRegExp","on","attrs","attributes","tag","target","tags","concat","tagStr","pattern","regexp","event","listener","args","type","closed","trimRight","parseHtml","lineStr","left","end","endIndex","nodes","textNode","trimLeft","emit","parent","LineInfo","getLine","index","attachTextNode","commentNode","parseComment","varNode","endColumn","ending","blockNode","applyAttr","blockClosed","NaN","engine","EngineName","snippetNode","noQuote","pos","quote","trim","module_1","fs","CompileOption","encoding","removeComments","timeout","Template","options","currentLine","importedModuleCount","layouts","assign","tpl","compile","compileFile","parse","createModule","render","loadTemplate","Promise","resolve","reject","xhr","open","onload","responseText","onabort","onerror","ontimeout","send","readFile","data","before","after","lineEnding","addSourceMap","attachBlockContents","pushCode","indent","attachImport","attachExport","attackBlock","attachIf","attachElseIf","attachElse","attachSwitch","attachCase","attachDefault","attachFor","attachWhile","attachDoWhile","attachLayout","shouldCompile","await","file","constructor","importModule","from","oldName","newName","block","async","params","export","condition","statement","while"],"mappings":"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","file":"whatstpl.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"whatstpl\"] = factory();\n\telse\n\t\troot[\"whatstpl\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IsBrowser = typeof window == \"object\"\n    && typeof XMLHttpRequest == \"function\";\nexports.Separator = exports.IsBrowser ? \"/\" :\n    (process.platform == \"win32\" ? \"\\\\\" : \"/\");\nfunction escape(html) {\n    return String(html).replace(/<\\/?[^>]*>/g, \"\");\n}\nexports.escape = escape;\nfunction dirname(path) {\n    if (path == \"/\")\n        return path;\n    let i = path.replace(/\\\\/g, \"/\").lastIndexOf(\"/\");\n    if (i < 0 || path == \"/\")\n        return \".\";\n    else if (i == path.length - 1)\n        return dirname(path.substring(0, i));\n    else\n        return path.substring(0, i).replace(/\\/|\\\\/g, exports.Separator);\n}\nexports.dirname = dirname;\nfunction basename(filename, extname = \"\") {\n    let dir = dirname(filename), basename = (dir == \"./\" && filename.match(/^\\.[\\/\\\\]/) == null)\n        ? filename : filename.substring(dir.length + 1);\n    if (extname) {\n        let i = basename.lastIndexOf(extname);\n        basename = i >= 0 ? basename.substring(0, i) : basename;\n    }\n    return basename;\n}\nexports.basename = basename;\nfunction extname(filename) {\n    let baseName = basename(filename), i = baseName.lastIndexOf(\".\");\n    return i >= 0 ? baseName.substring(i) : \"\";\n}\nexports.extname = extname;\nfunction normalizePath(path) {\n    let parts = path.split(/\\/|\\\\/);\n    for (let i = 0; i < parts.length; i++) {\n        if (parts[i] == \"..\") {\n            parts.splice(i - 1, 2);\n            i -= 2;\n        }\n        else if (parts[i] == \".\") {\n            parts.splice(i, 1);\n            i -= 1;\n        }\n    }\n    return parts.join(exports.Separator);\n}\nexports.normalizePath = normalizePath;\nfunction getCwd() {\n    if (exports.IsBrowser) {\n        return location.protocol + \"//\" + location.host\n            + dirname(location.pathname);\n    }\n    else {\n        return process.cwd();\n    }\n}\nexports.getCwd = getCwd;\nfunction isAbsPath(path) {\n    return path[0] == \"/\" || path.match(/^[a-zA-Z0-9]+:[\\/\\\\]/) != null;\n}\nexports.isAbsPath = isAbsPath;\nfunction getAbsPath(filename) {\n    if (!isAbsPath(filename)) {\n        let dir = getCwd(), noSep = dir[dir.length - 1] == \"/\";\n        filename = dir + (noSep ? \"\" : exports.Separator) + filename;\n    }\n    return normalizePath(filename);\n}\nexports.getAbsPath = getAbsPath;\nfunction getObjectValues(obj) {\n    let res = [];\n    for (let prop in obj) {\n        if (obj.hasOwnProperty(prop))\n            res.push(obj[prop]);\n    }\n    return res;\n}\nexports.getObjectValues = getObjectValues;\nfunction getFunctionBodyOffset(fn) {\n    let fnStr = fn.toString(), i = fnStr.indexOf(\"{\") + 1, defArr = fnStr.slice(0, i).split(\"\\n\"), inNewLine = fnStr[i] == \"\\n\", column = inNewLine ? 0 : defArr[defArr.length - 1].indexOf(\"{\") + 2, line = inNewLine ? defArr.length : defArr.length - 1;\n    return { line, column };\n}\nexports.getFunctionBodyOffset = getFunctionBodyOffset;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass UnclosedTagError extends SyntaxError {\n    constructor(message, filename, line, column) {\n        super(message);\n        this.filename = filename;\n        this.line = line;\n        this.column = column;\n    }\n}\nexports.UnclosedTagError = UnclosedTagError;\n//# sourceMappingURL=errors.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./errors\"));\n__export(require(\"./parser\"));\n__export(require(\"./utils\"));\n//# sourceMappingURL=index.js.map","module.exports = require(\"fs\");","import {\n    normalizePath,\n    dirname,\n    isAbsPath,\n    escape,\n    getObjectValues,\n    getFunctionBodyOffset,\n    Node\n} from \"whatstpl-toolkit\";\n\nexport interface SourceMap {\n    [line: string]: {\n        column: number;\n        node: Node;\n    }\n}\n\nexport class Module {\n    id: string;\n    filename: string;\n    dirname: string;\n    code: string;\n    parent: Module;\n    children: { [filename: string]: Module } = {};\n    sourceMap: SourceMap = {};\n\n    static cache: { [filename: string]: Module } = {};\n    static sourceMaps: { [filename: string]: SourceMap } = {};\n\n    constructor(filename: string) {\n        this.id = this.filename = normalizePath(filename);\n        this.dirname = dirname(filename);\n        this.code = \"\";\n    }\n\n    /**\n     * \n     * @param id Module id, usually it's the module filename.\n     * @param locals Local variables passed to the module.\n     * @param contents Layout contents, used when the current module is a \n     *  layout module.\n     */\n    require(id: string, locals: { [name: string]: any } = {}, contents = \"\"): {\n        [name: string]: any;\n        default?: string;\n    } {\n        let filename = isAbsPath(id) || this.dirname == \".\"\n            ? id\n            : normalizePath(this.dirname + \"/\" + id);\n        let dir = dirname(filename);\n\n        if (Module.cache[filename]) {\n            let _module = Module.cache[filename],\n                _exports = { default: \"\" },\n                _require = (id: string, locals = {}, contents = \"\") => {\n                    return _module.require(id, locals, contents);\n                };\n\n            this.children[filename] = _module;\n\n            let fn = createFunction(this.filename, _module.code, locals);\n\n            fn.call(\n                _exports,\n                _require,\n                filename,\n                dir,\n                contents,\n                locals,\n                escape,\n                ...getObjectValues(locals)\n            );\n\n            return _exports;\n        } else {\n            throw new Error(\"the request module hasn't been imported!\");\n        }\n    }\n}\n\nconst Params = \"require, __filename, __dirname, __contents, __locals, __escape\";\nconst EvalRE = /at ([a-zA-Z0-9_\\.]+) \\(eval at.+<anonymous>:(\\d+:\\d+)\\)/;\nconst RequireRE = /const __module_\\d+ = require\\('(.+?)'/;\nconst FnCallRE = /([a-zA-Z0-9_]+).call\\(this.*\\)/;\n\n// The `new Function()` will generate a function which it's string \n// representation is different in different JavaScript engines, so here I \n// calculate out the function body offset from a test function, so that when \n// replacing the error, the program can calculate the accurate position of the\n// function body.\nconst FnBodyOffset = getFunctionBodyOffset(new Function(\"a, b\", \"a + b\"));\n\nfunction createFunction(filename: string, code: string, locals: {\n    [prop: string]: any\n}) {\n    let props = Object.keys(locals).join(\", \");\n\n    try {\n        return new Function(Params + (props ? \", \" + props : \"\"), code);\n    } catch (err) {\n        if (err instanceof SyntaxError) { // replace the error stack.\n            err.message = \"Unexpected token found\";\n            \n            let stacks = err.stack.split(\"\\n\");\n\n            stacks[1] = stacks[1].replace(\"<anonymous>\", filename);\n            err.stack = stacks.join(\"\\n\");\n            \n            throw err;\n        } else {\n            throw replaceError(err, filename);\n        }\n    }\n}\n\n/** Gets the function name from a line of code. */\nfunction getFuncName(lineCode: string): string {\n    let matches = lineCode.match(FnCallRE);\n    return matches ? matches[1] : \"\";\n}\n\n/** Gets the imported filename from a `require()` statement. */\nfunction getImportFilename(code: string, line: number): string {\n    let codeArr = code.split(\"\\n\"),\n        funcName = getFuncName(codeArr[line - 1]),\n        lineCode: string, matches: RegExpMatchArray;\n\n    if (funcName) {\n        let re = new RegExp(`const ${funcName} = (__module_\\\\d+)\\.`),\n            _codeArr: string[], moduleId: string;\n\n        for (let i in codeArr) {\n            matches = codeArr[i].match(re);\n\n            if (matches) {\n                _codeArr = codeArr.slice(0, parseInt(i));\n                moduleId = matches[1];\n\n                break;\n            }\n        }\n\n        if (moduleId && _codeArr && _codeArr.length) {\n            _codeArr.reverse();\n            let re = new RegExp(`const ${moduleId} = require\\\\('(.+?)'`);\n\n            for (let code of _codeArr) {\n                matches = code.match(re);\n\n                if (matches)\n                    return matches[1].replace(/\\\\\\\\/g, \"\\\\\");\n            }\n        } else {\n            return \"\";\n        }\n    } else {\n        // line number starts from 1, while array index starts from 0, so here \n        // must decrease 1.\n        lineCode = codeArr[line - 1];\n        matches = lineCode && lineCode.match(RequireRE);\n\n        return matches ? matches[1].replace(/\\\\\\\\/g, \"\\\\\") : \"\";\n    }\n}\n\n/**\n * Replaces error stack according to the source map.\n * @param filename The main module filename.\n */\nexport function replaceError(err: Error, filename: string): Error {\n    let stacks = err.stack.split(\"\\n\").reverse();\n\n    for (let i in stacks) {\n        // first line the the stack or failed to parse the filename.\n        if (stacks[i][0] != \" \" || !filename) continue;\n\n        let matches = stacks[i].match(EvalRE);\n\n        if (matches) {\n            let funcName = matches[1],\n                pair = matches[2].split(\":\"),\n                line: number = parseInt(pair[0]),\n                column: number = parseInt(pair[1]),\n                // The running code will be wrapped in a function which the \n                // definition takes at least one line, so here the line number \n                // should decrease according to the function body offset.\n                source = {\n                    funcName,\n                    filename,\n                    line: line - FnBodyOffset.line,\n                    column\n                },\n                /** The source map of one line of code. */\n                map = Module.sourceMaps[filename][source.line],\n                code = Module.cache[filename].code;\n\n            // If the source line is 1 (the first line), then the column \n            // should be calculated as well.\n            if (source.line == 1)\n                source.column = column - FnBodyOffset.column;\n\n            // recalculate the filename, move to the next import file.\n            filename = getImportFilename(code, source.line);\n\n            // Replace the line number to the line number in the source file.\n            source.line = map.node.line;\n            // Calculate and replace the column number.\n            source.column = (column - map.column) + map.node.column;\n\n            stacks[i] = `    at ${source.funcName} (${source.filename}`\n                + `:${source.line}:${source.column})`;\n        }\n    }\n\n    // Regenerate the error stack.\n    stacks.reverse();\n    err.stack = stacks.join(\"\\n\");\n\n    return err;\n}","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst errors_1 = require(\"./errors\");\nconst utils_1 = require(\"./utils\");\nconst AttrRe = /([0-9a-zA-Z:\\-]+)\\s*=\\s*|([0-9a-zA-Z:\\-]+)\\s*/;\nclass Parser {\n    constructor(filename = \"\") {\n        this.listeners = {};\n        this.outputTags = Parser.OutputTags;\n        this.blockTags = Parser.BlockTags;\n        if (filename)\n            this.filename = utils_1.getAbsPath(filename);\n        else\n            this.filename = \"undefined\";\n        this.renewRegExp();\n        this.on(\"block\", (node) => {\n            let attrs = node.attributes;\n            if (node.tag == \"block\") {\n                this.blockTags.push(attrs.name.value);\n                this.renewRegExp();\n            }\n            else if (node.tag == \"import\" && attrs.target && attrs.target.value) {\n                let tags = attrs.target.value.split(/,\\s*/);\n                for (let i in tags) {\n                    let pair = tags[i].split(/\\s+as\\s+/);\n                    tags[i] = pair[1] || pair[0];\n                }\n                this.blockTags = this.blockTags.concat(tags);\n                this.renewRegExp();\n            }\n        });\n    }\n    renewRegExp() {\n        let tagStr = this.blockTags.join(\"|\");\n        let pattern = \"<!--(.*?)-->|<!--(.*)|(\"\n            + this.outputTags.join(\"|\")\n            + \")\\{(.+?)\\}|<(\"\n            + tagStr\n            + \")[\\\\s|\\\\/|>]|<\\\\/(\"\n            + tagStr\n            + \")>\";\n        this.regexp = new RegExp(pattern);\n    }\n    on(event, listener) {\n        if (!this.listeners[event])\n            this.listeners[event] = [];\n        this.listeners[event].push(listener);\n    }\n    emit(event, ...args) {\n        if (!this.listeners[event] || !this.listeners[event].length)\n            return false;\n        for (let listener of this.listeners[event]) {\n            listener(...args);\n        }\n        return true;\n    }\n    parse(html) {\n        let root = {\n            tag: \"root\",\n            type: \"root\",\n            line: 1,\n            column: 1,\n            contents: [],\n            closed: false\n        };\n        this.html = html.trimRight().replace(/\\r\\n|\\r/g, \"\\n\");\n        this.parseHtml(this.html, 1, 1, root);\n        return root;\n    }\n    getLine(html, line) {\n        let lineStr, left;\n        while (true) {\n            let end = html.indexOf(\"\\n\");\n            lineStr = (end >= 0 ? html.substring(0, end) : html).trimRight();\n            left = end >= 0 ? html.substring(end + 1) : \"\";\n            if (lineStr || !left) {\n                break;\n            }\n            else {\n                line += 1;\n                html = left;\n            }\n        }\n        return { lineStr, left, line };\n    }\n    attachTextNode(lineStr, line, column, endIndex, nodes) {\n        let textNode = {\n            type: \"text\",\n            line,\n            column,\n            contents: endIndex ? lineStr.substring(0, endIndex) : lineStr + \"\\n\",\n            closed: true,\n        };\n        if (textNode.contents.trimLeft()) {\n            nodes.push(textNode);\n            this.emit(\"text\", textNode);\n        }\n    }\n    parseHtml(html, line, column = 1, parent) {\n        let LineInfo = this.getLine(html, line), lineStr = LineInfo.lineStr, matches = lineStr.match(this.regexp), nodes = parent.contents;\n        html = LineInfo.left;\n        line = LineInfo.line;\n        if (!matches) {\n            if (parent.tag == \"script\"\n                && parent.attributes.engine\n                && parent.attributes.engine.value == Parser.EngineName) {\n                let snippetNode = {\n                    type: \"snippet\",\n                    line,\n                    column,\n                    contents: lineStr + \"\\n\",\n                    closed: true,\n                };\n                nodes.push(snippetNode);\n                this.emit(\"snippet\", snippetNode);\n            }\n            else {\n                this.attachTextNode(lineStr, line, column, NaN, nodes);\n            }\n            line += 1;\n            column = 1;\n        }\n        else if (matches[1] && parent.tag != \"script\") {\n            if (matches.index) {\n                this.attachTextNode(lineStr, line, column, matches.index, nodes);\n                column += matches.index;\n            }\n            let left = lineStr.substring(matches.index + matches[0].length), commentNode = {\n                type: \"comment\",\n                line,\n                column,\n                contents: matches[0],\n                closed: false\n            };\n            nodes.push(commentNode);\n            this.emit(\"comment\", commentNode);\n            if (left) {\n                html = left + \"\\n\" + html;\n                column += matches[0].length;\n            }\n            else {\n                commentNode.contents += \"\\n\";\n                line += 1;\n                column = 1;\n            }\n        }\n        else if (matches[2] && parent.tag != \"script\") {\n            if (matches.index) {\n                this.attachTextNode(lineStr, line, column, matches.index, nodes);\n                column += matches.index;\n            }\n            let commentNode = {\n                type: \"comment\",\n                line,\n                column,\n                contents: lineStr.substring(matches.index),\n                closed: false\n            };\n            line += 1;\n            column = 1;\n            let res = this.parseComment(html, line, column, commentNode);\n            nodes.push(commentNode);\n            this.emit(\"comment\", commentNode);\n            html = res.left;\n            line = res.line;\n            column = res.column;\n        }\n        else if (matches[3] && matches[4]) {\n            if (matches.index) {\n                this.attachTextNode(lineStr, line, column, matches.index, nodes);\n                column += matches.index;\n            }\n            column += 2;\n            let varNode = {\n                tag: matches[3],\n                type: \"var\",\n                line,\n                column,\n                contents: matches[4],\n                closed: true,\n            };\n            nodes.push(varNode);\n            this.emit(\"var\", varNode);\n            let endColumn = matches.index + matches[4].length + 3, left = lineStr.substring(endColumn);\n            if (left.trimRight()) {\n                html = left + (html ? \"\\n\" + html : \"\");\n                column += matches[4].length + 1;\n            }\n            else {\n                line += 1;\n                column = 1;\n            }\n        }\n        else if (matches[5] && parent.tag != \"script\") {\n            if (matches.index) {\n                this.attachTextNode(lineStr, line, column, matches.index, nodes);\n                column += matches.index;\n            }\n            let endColumn = matches.index + matches[0].length, ending = lineStr[endColumn - 1], blockNode = {\n                tag: matches[5],\n                type: \"block\",\n                line,\n                column,\n                attributes: {},\n                contents: [],\n                closed: false,\n            };\n            if (ending == \"/\" || ending == \">\")\n                endColumn -= 1;\n            let left = lineStr.substring(endColumn);\n            if (!left && html) {\n                column = 1;\n                let LineInfo = this.getLine(html, line);\n                if (LineInfo.lineStr) {\n                    left = LineInfo.lineStr;\n                    html = LineInfo.left;\n                }\n            }\n            if (left) {\n                html = left + (html ? \"\\n\" + html : \"\");\n                column += matches[0].length;\n            }\n            else {\n                throw new errors_1.UnclosedTagError(\"unclosed tag\", this.filename, line, column);\n            }\n            let res = this.applyAttr(html, line, column, blockNode.attributes);\n            blockNode.closed = res.blockClosed;\n            if (res.left && !blockNode.closed) {\n                res = this.parseHtml(res.left, res.line, res.column, blockNode);\n            }\n            nodes.push(blockNode);\n            this.emit(\"block\", blockNode);\n            html = res.left;\n            line = res.line;\n            column = res.column;\n        }\n        else if (matches[6] && matches[6] == parent.tag) {\n            if (matches.index && parent.tag != \"script\") {\n                this.attachTextNode(lineStr, line, column, matches.index, nodes);\n            }\n            parent.closed = true;\n            let endColumn = matches.index + matches[0].length, left = lineStr.substring(endColumn);\n            if (left) {\n                html = left + (html ? \"\\n\" + html : \"\");\n                column += endColumn;\n            }\n            else {\n                line += 1;\n                column = 1;\n            }\n        }\n        else {\n            this.attachTextNode(lineStr, line, column, NaN, nodes);\n            line += 1;\n            column = 1;\n        }\n        if (html && !parent.closed) {\n            return this.parseHtml(html, line, column, parent);\n        }\n        else {\n            parent.closed = true;\n            return { line, column, left: html };\n        }\n    }\n    applyAttr(html, line, column, attrs) {\n        let LineInfo = this.getLine(html, line), lineStr = LineInfo.lineStr, matches = lineStr.match(AttrRe);\n        line = LineInfo.line;\n        html = LineInfo.left;\n        if (!matches) {\n            let i = lineStr.indexOf(\">\");\n            if (i === -1) {\n                throw new errors_1.UnclosedTagError(\"unclosed tag\", this.filename, line, column);\n            }\n            else {\n                column += i + 1;\n                let left = lineStr.substring(i + 1);\n                if (left) {\n                    html = left + \"\\n\" + html;\n                }\n                else {\n                    line += 1;\n                    column = 1;\n                }\n            }\n            return {\n                line,\n                column,\n                left: html,\n                blockClosed: lineStr[i - 1] == \"/\"\n            };\n        }\n        let name;\n        let value;\n        let noQuote = true;\n        let ending;\n        let blockClosed;\n        let left;\n        if (matches[1]) {\n            let pos = matches.index + matches[0].length, quote = lineStr[pos], end;\n            noQuote = quote != \"'\" && quote != '\"';\n            if (!noQuote)\n                pos += 1;\n            if (!noQuote) {\n                end = lineStr.indexOf(quote, pos);\n            }\n            else {\n                end = lineStr.indexOf(\"/\", pos);\n                if (end === -1)\n                    end = lineStr.indexOf(\">\", pos);\n            }\n            name = matches[1],\n                value = end === -1 ? \"\" : lineStr.substring(pos, end);\n            left = lineStr.substring(end + 1);\n            column += pos;\n        }\n        else if (matches[2]) {\n            name = value = matches[2].trim();\n            left = lineStr.substring(matches.index + matches[0].length);\n            column += matches.index;\n        }\n        ending = left ? left.trimLeft()[0] : \"\";\n        blockClosed = ending == \"/\";\n        attrs[name] = { name, value, line, column };\n        if (ending == \"/\")\n            left = left.substring(2);\n        else if (ending == \">\")\n            left = left.substring(1);\n        if (left) {\n            html = left + \"\\n\" + html;\n            column += (matches[1] ? value.length : matches[0].length)\n                + (noQuote ? 0 : 1);\n        }\n        else {\n            line += 1;\n            column = 1;\n        }\n        if (!ending || (ending != \">\" && ending != \"/\")) {\n            return this.applyAttr(html, line, column, attrs);\n        }\n        else {\n            let i;\n            if (ending == \">\")\n                i = left.indexOf(\">\") + 1;\n            else if (ending == \"/\")\n                i = left.indexOf(\"/>\") + 2;\n            column += i;\n            return { line, column, left: html, blockClosed };\n        }\n    }\n    parseComment(html, line, column, commentNode) {\n        let LineInfo = this.getLine(html, line), lineStr = LineInfo.lineStr, matches = lineStr && lineStr.match(/-->/);\n        line = LineInfo.line;\n        html = LineInfo.left;\n        if (lineStr)\n            commentNode.contents += \"\\n\";\n        if (!matches) {\n            commentNode.contents += lineStr;\n            line += 1;\n            column = 1;\n            if (html) {\n                return this.parseComment(html, line, column, commentNode);\n            }\n            else {\n                return { line, column, left: html };\n            }\n        }\n        else {\n            if (matches.index) {\n                commentNode.contents += lineStr.substring(0, matches.index);\n            }\n            commentNode.contents += matches[0];\n            commentNode.closed = true;\n            column += matches.index + 3;\n            let left = lineStr.substring(column);\n            if (left) {\n                html = left + \"\\n\" + html;\n            }\n            else {\n                line += 1;\n                column = 1;\n            }\n        }\n        return { line, column, left: html };\n    }\n}\nParser.EngineName = \"whatstpl\";\nParser.BlockTags = [\n    \"layout\",\n    \"import\",\n    \"export\",\n    \"block\",\n    \"if\",\n    \"else-if\",\n    \"else\",\n    \"switch\",\n    \"case\",\n    \"default\",\n    \"for\",\n    \"while\",\n    \"do\",\n    \"continue\",\n    \"break\",\n    \"script\",\n];\nParser.OutputTags = [\n    \"!\",\n    \"@\",\n    \"#\",\n];\nexports.Parser = Parser;\n//# sourceMappingURL=parser.js.map","import {\n    Node,\n    Parser,\n    escape,\n    isAbsPath,\n    extname,\n    dirname,\n    normalizePath,\n    getAbsPath,\n    getCwd,\n    Separator,\n    IsBrowser\n} from \"whatstpl-toolkit\";\nimport { Module, replaceError } from \"./module\";\n\nvar fs: {\n    readFile(filename: string, encoding: string, cb: (err: Error, data: string) => void);\n} = null;\n\nif (!IsBrowser) {\n    fs = require(\"fs\");\n}\n\nexport type Variables = { [name: string]: any };\nexport type Renderer = (locals?: Variables) => string;\n\nexport interface CompileOption {\n    /** For fs.readFile() to decode the file contents. */\n    encoding?: string;\n    /** Whether the compiled function should be cached in memory. */\n    cache?: boolean;\n    /** Whether or not to remove the comments when ernder HTML. */\n    removeComments?: boolean;\n    /**\n     * Used when the program is run in a browser and load remote template via \n     * Ajax.\n     */\n    timeout?: number;\n}\n\nexport const CompileOption: CompileOption = {\n    encoding: \"utf8\",\n    cache: false,\n    removeComments: false,\n    timeout: 5000\n}\n\nexport class Template {\n    filename: string;\n    options: CompileOption;\n    module: Module;\n\n    private currentLine: number = 0;\n    private importedModuleCount: number = 0;\n    private layouts: Array<{ filename: string, node: Node }> = [];\n\n    static cache: { [filename: string]: Renderer } = {};\n\n    constructor(filename?: string, encoding?: string);\n    constructor(filename?: string, options?: CompileOption);\n    constructor(filename = \"\", options: any = \"utf8\") {\n        if (filename)\n            this.filename = getAbsPath(filename);\n        else\n            this.filename = \"undefined\";\n\n        if (typeof options == \"string\")\n            options = { encoding: options };\n\n        this.options = Object.assign({}, CompileOption, options);\n    }\n\n    /** Renders the given template contents. */\n    async render(tpl: string, locals: Variables = {}): Promise<string> {\n        let render = await this.compile(tpl);\n        return render(locals);\n    }\n\n    /** Renders the given file. */\n    static async renderFile(filename?: string, locals?: Variables, encoding?: string): Promise<string>;\n    static async renderFile(filename?: string, locals?: Variables, options?: CompileOption): Promise<string>;\n    static async renderFile(filename: string, locals: Variables = null, options = null): Promise<string> {\n        let render = await this.compileFile(filename, options);\n        return render(locals || {});\n    }\n\n    /** Compiles the given template contents. */\n    async compile(tpl: string): Promise<Renderer> {\n        // If the function is already cached, retrieve it instead.\n        if (this.options.cache && Template.cache[this.filename]) {\n            return Template.cache[this.filename];\n        }\n\n        let parser = new Parser(this.filename),\n            node: Node = parser.parse(tpl),\n            _module: Module = await this.createModule(node);\n\n        // Wrap the function in a render function, so when it is  called, the \n        // program can catch and re-throw any errors, and only  return the \n        // `default` property (HTML) from the module.\n        let render: Renderer = (locals = {}) => {\n            try {\n                return _module.require(this.filename, locals).default;\n            } catch (err) { // replace and re-throw the error.\n                throw replaceError(err, this.filename);\n            }\n        };\n\n        if (this.options.cache)\n            Template.cache[this.filename] = render;\n\n        return render;\n    }\n\n    /** Compiles the given file. */\n    static async compileFile(filename: string, encoding?: string): Promise<Renderer>;\n    static async compileFile(filename: string, options?: CompileOption): Promise<Renderer>;\n    static async compileFile(filename: string, options: any = null): Promise<Renderer> {\n        filename = getAbsPath(filename);\n\n        // If the function is already cached, retrieve it instead.\n        if (options && options.cache && Template.cache[filename]) {\n            return Template.cache[filename];\n        }\n\n        let tpl: Template = new this(filename, options),\n            html = await tpl.loadTemplate();\n\n        return tpl.compile(html);\n    }\n\n    /** Loads the template contents from the file. */\n    protected loadTemplate(): Promise<string> {\n        if (!IsBrowser) {\n            return new Promise((resolve, reject) => {\n                fs.readFile(this.filename, this.options.encoding, (err, data) => {\n                    err ? reject(err) : resolve(data);\n                });\n            });\n        } else {\n            return new Promise((resolve, reject) => {\n                let xhr = new XMLHttpRequest();\n                xhr.timeout = this.options.timeout;\n                xhr.open(\"GET\", this.filename, true);\n                xhr.onload = () => {\n                    resolve(xhr.responseText);\n                };\n                xhr.onabort = xhr.onerror = xhr.ontimeout = () => {\n                    reject(new Error(\"failed to load remote module.\"));\n                };\n                xhr.send();\n            });\n        }\n    }\n\n    /** Gets the absolute path of the filename, if it is relative.  */\n    protected getAbsPath(filename: string): string {\n        if (!isAbsPath(filename)) {\n            let dir = this.filename && this.filename != \"undefined\"\n                ? dirname(this.filename)\n                : getCwd();\n\n            filename = normalizePath(dir + Separator + filename);\n        }\n\n        // If the extension name is omitted, use the one of the parent file.\n        if (!extname(filename)) {\n            filename += extname(this.filename);\n        }\n\n        return filename;\n    }\n\n    /** Adds a line of source map to the internal `sourceMap` property.  */\n    private addSourceMap(column: number, node: Node) {\n        this.currentLine += 1;\n        this.module.sourceMap[this.currentLine] = { column, node };\n    }\n\n    /** Pushes a line of code to the internal `code` object. */\n    protected pushCode(before: string, contents: string, after: string, node: Node, lineEnding = true) {\n        this.module.code += before + contents + after + (lineEnding ? \"\\n\" : \"\");\n        // `length` of a string starts from 0, but column number starts from 1,\n        // so here it should add 1. \n        this.addSourceMap(before.length + 1, node);\n    }\n\n    /** Imports a module from the given file. */\n    protected async importModule(parent: Module = null): Promise<Module> {\n        if (this.options.cache && Module.cache[this.filename]) {\n            return Module.cache[this.filename];\n        }\n\n        let tpl = await this.loadTemplate(),\n            parser = new Parser(this.filename),\n            node = parser.parse(tpl);\n\n        return this.createModule(node, parent);\n    }\n\n    /** Creates a new module according to the given filename and node tree. */\n    private async createModule(node: Node, parent: Module = null): Promise<Module> {\n        let _module = new Module(this.filename);\n\n        this.module = _module;\n\n        await this.attachBlockContents(node);\n\n        // If there is any layouts, push then to the very bottom of the \n        // compiled code, and in the layout module, use variable `__contents` \n        // to  attach the inner contents.\n        if (this.layouts.length) {\n            for (let { filename, node } of this.layouts) {\n                this.importedModuleCount += 1;\n\n                let moduleId = \"__module_\" + this.importedModuleCount;\n                filename = filename.replace(/\\\\/g, \"\\\\\\\\\");\n\n                // When dealing with layout, only import the `default` property,\n                // and reassign the `default` in the current module.\n                this.pushCode(\n                    `const ${moduleId} = `,\n                    `require('${filename}', __locals, this.default)`,\n                    \";\",\n                    node\n                );\n                this.pushCode(\"this.default = \", `${moduleId}.default`, \";\", node);\n            }\n        }\n\n        _module.parent = parent;\n        Module.cache[this.filename] = _module; // cache the module.\n        Module.sourceMaps[this.filename] = _module.sourceMap; // cache the source map.\n\n        return _module;\n    }\n\n    /** Attaches block contents to the internal `code` object. */\n    private async attachBlockContents(parent: Node, indent = \"\") {\n        let cutSpace = NaN;\n\n        for (let node of <Node[]>parent.contents) {\n            if (node.type == \"text\"\n                || (node.type == \"comment\" && !this.options.removeComments)) {\n                let contents = (<string>node.contents).replace(/\\n/g, \"\\\\n\")\n                    .replace(/'/g, \"\\\\'\");\n\n                this.pushCode(\n                    indent + \"this.default += '\",\n                    contents,\n                    \"';\",\n                    node\n                );\n            } else if (node.type == \"var\") {\n                if (node.tag == \"!\") { // !{statement}\n                    this.pushCode(indent, <string>node.contents, \";\", node);\n                } else if (node.tag == \"@\") { // @{statement}\n                    this.pushCode(\n                        indent + \"this.default += \",\n                        <string>node.contents,\n                        \";\",\n                        node\n                    );\n                } else { // #{statement}\n                    this.pushCode(\n                        indent + \"this.default += __escape(\",\n                        <string>node.contents,\n                        \");\",\n                        node\n                    );\n                }\n            } else if (node.type == \"snippet\") { // <script engine=\"whatstpl\"></script>\n                // if (isNaN(cutSpace)) {\n                //     let match = (<string>node.contents).match(/\\S/);\n\n                //     if (match)\n                //         cutSpace = match.index;\n                // }\n\n                let contents: string = cutSpace\n                    ? (<string>node.contents).substring(cutSpace)\n                    : <string>node.contents;\n\n                this.pushCode(indent.substring(4), contents, \"\", node, false);\n            } else if (node.type == \"block\") {\n                if (node.tag == \"import\") { // <import/>\n                    await this.attachImport(node, indent);\n                } else if (node.tag == \"export\") { // <export/>\n                    await this.attachExport(node, indent);\n                } else if (node.tag == \"block\") { // <block></block>\n                    await this.attackBlock(node, indent);\n                } else if (node.tag == \"if\") { // <if></if>\n                    await this.attachIf(node, indent);\n                } else if (node.tag == \"else-if\") { // <else-if></else-if>\n                    await this.attachElseIf(node, indent.substring(4));\n                } else if (node.tag == \"else\") { // <else></else>\n                    await this.attachElse(node, indent.substring(4));\n                } else if (node.tag == \"switch\") { // <switch></switch>\n                    await this.attachSwitch(node, indent);\n                } else if (node.tag == \"case\") { // <case></case>\n                    await this.attachCase(node, indent);\n                } else if (node.tag == \"default\") { // <default></default>\n                    await this.attachDefault(node, indent);\n                } else if (node.tag == \"for\") { // <for></for>\n                    await this.attachFor(node, indent);\n                } else if (node.tag == \"while\") { // <while></while>\n                    await this.attachWhile(node, indent);\n                } else if (node.tag == \"do\") { // <do></do>\n                    await this.attachDoWhile(node, indent);\n                } else if (node.tag == \"continue\" || node.tag == \"break\") {\n                    // <continue/> and <break/>\n                    this.pushCode(indent, node.tag, \";\", node);\n                } else if (node.tag == \"layout\") { // <layout></layout>\n                    await this.attachLayout(node, indent);\n                } else if (node.tag == \"script\") { // <script></script>\n                    let attrs = node.attributes;\n                    let shouldCompile = !attrs.engine\n                        || attrs.engine.value != Parser.EngineName;\n\n                    if (shouldCompile) { // JavaScript of the HTML.\n                        let contents = \"<script\";\n\n                        // attach attributes.\n                        for (let name in attrs) {\n                            contents += ` ${name}=\"${attrs[name].value}\"`;\n                        }\n\n                        contents += \">\\\\n\";\n                        this.pushCode(\n                            indent + \"this.default += '\",\n                            contents,\n                            \"';\",\n                            node\n                        );\n                    }\n\n                    // Attaches the contents in the <script> element.\n                    await this.attachBlockContents(node, indent + \"    \");\n\n                    if (shouldCompile) {\n                        this.pushCode(\n                            indent + \"this.default += '\",\n                            \"</script>\\\\n\",\n                            \"';\",\n                            node\n                        );\n                    }\n                } else { // user-defined block tags.\n                    let name = node.tag.replace(/-/g, \"_\"),\n                        attrs = node.attributes;\n\n                    if (attrs.await && attrs.await.value != \"false\")\n                        name = \"await \" + name;\n\n                    let contents = \"call(this\";\n\n                    // User-defined block tags are treated as function, when \n                    // called, the attribute `data` will be used as arguments\n                    // and passed to the function.\n                    if (attrs.data && attrs.data.value)\n                        contents += \", \" + attrs.data.value;\n\n                    contents += \")\";\n\n                    this.pushCode(indent + name + \".\", contents, \";\", node);\n                }\n            }\n        }\n    }\n\n    /** <layout file=\"<filename>\"/> */\n    private async attachLayout(node: Node, indent = \"\") {\n        let filename = this.getAbsPath(node.attributes.file.value),\n            tpl: Template = new (<any>this.constructor)(filename, this.options);\n\n        await tpl.importModule(this.module);\n\n        // The layouts are not attached immediately, they will be stored in \n        // an array, when the current module is compiled, layouts will be \n        // added to the very end of the compiled code.\n        this.layouts.push({ filename, node });\n    }\n\n    /** <import[ target=\"<block-name>\"] file|from=\"<filename>\"/> */\n    private async attachImport(node: Node, indent = \"\") {\n        let attrs = node.attributes,\n            filename = this.getAbsPath(attrs.from ? attrs.from.value : attrs.file.value),\n            tpl: Template = new (<any>this.constructor)(filename, this.options);\n\n        await tpl.importModule(this.module);\n\n        this.importedModuleCount += 1;\n\n        let moduleId = \"__module_\" + this.importedModuleCount;\n        filename = filename.replace(/\\\\/g, \"\\\\\\\\\");\n        this.pushCode(\n            `${indent}const ${moduleId} = `,\n            `require('${filename}', __locals)`,\n            \";\",\n            node\n        );\n\n        // The 'target' attribute in a <import/> elements sets which names \n        // should be imported.\n        if (attrs.target && attrs.target.value) {\n            let tags = attrs.target.value.replace(/-/g, \"_\").split(/\\s*,\\s*/);\n\n            for (let tag of tags) {\n                // parse as syntax.\n                let pair = tag.split(/\\s*as\\s*/),\n                    oldName = pair[0],\n                    newName = pair[1] || oldName;\n\n                this.pushCode(\n                    indent,\n                    `const ${newName} = ${moduleId}.${oldName}`,\n                    \";\",\n                    node\n                );\n            }\n        } else { // If no 'target', then import the `default` property.\n            this.pushCode(indent, `this.default += ${moduleId}.default`, \";\", node);\n        }\n    }\n\n    /** <export target=\"<block-names>\"/> */\n    private async attachExport(node: Node, indent = \"\") {\n        // The 'target' attribute in a <export/> elements sets which names \n        // should be exported and can be imported by other modules.\n        if (node.attributes.target && node.attributes.target.value) {\n            let tags = node.attributes.target.value.split(/,\\s*/);\n\n            for (let i in tags) {\n                // parse `as` syntax\n                let pair = tags[i].split(/\\s+as\\s+/),\n                    oldName = pair[0].replace(/-/g, \"_\"),\n                    newName = pair[1] ? pair[1].replace(/-/g, \"_\") : oldName;\n\n                this.pushCode(indent, `this.${newName} = ${oldName}`, \";\", node);\n            }\n        }\n    }\n\n    /** <block name=\"<name>\"[ export][ async][ params=\"<params>\"]></block> */\n    private async attackBlock(block: Node, indent = \"\") {\n        let attrs = block.attributes,\n            name = attrs.name.value.replace(/-/g, \"_\"),\n            contents = `function ${name}(`;\n\n        // 'async' attribute means the function is an async function.\n        if (attrs.async && attrs.async.value != \"false\")\n            contents = `async ` + contents;\n\n        // 'params' attribute sets function parameters.\n        if (attrs.params && attrs.params.value)\n            contents += attrs.params.value;\n\n        contents += \")\";\n\n        this.pushCode(indent, contents, \" {\", block);\n\n        await this.attachBlockContents(block, indent + \"    \");\n\n        this.pushCode(indent, \"\", \"}\", block);\n\n        // The block can be exported by setting an 'export' attribute.\n        if (attrs.export && attrs.export.value != \"false\")\n            this.pushCode(indent, `this.${name} = ${name}`, \";\", block);\n    }\n\n    /** <if condition=\"<condition>\"></if> */\n    private async attachIf(block: Node, indent = \"\") {\n        this.pushCode(indent + \"if (\", block.attributes.condition.value, \") {\", block);\n        await this.attachBlockContents(block, indent + \"    \");\n        this.pushCode(indent, \"\", \"}\", block);\n    }\n\n    /** <else-if condition=\"<condition>\"></else-if> */\n    private async attachElseIf(block: Node, indent = \"\") {\n        this.pushCode(indent + \"} else if (\", block.attributes.condition.value, \") {\", block);\n        await this.attachBlockContents(block, indent + \"    \");\n    }\n\n    /** <else></else> */\n    private async attachElse(block: Node, indent = \"\") {\n        this.pushCode(indent + \"} else {\", \"\", \"\", block);\n        await this.attachBlockContents(block, indent + \"    \");\n    }\n\n    /** <switch target=\"<target>\"></switch> */\n    private async attachSwitch(block: Node, indent = \"\") {\n        this.pushCode(indent + \"switch (\", block.attributes.target.value, \") {\", block);\n        await this.attachBlockContents(block, indent + \"    \");\n        this.pushCode(indent, \"\", \"}\", block);\n    }\n\n    /** <case data=\"<data>\"></case> */\n    private async attachCase(block: Node, indent = \"\") {\n        this.pushCode(indent + \"case \", block.attributes.data.value, \":\", block);\n        await this.attachBlockContents(block, indent + \"    \");\n        this.pushCode(indent + \"    \", \"break\", \";\", block);\n    }\n\n    /** <default></default> */\n    private async attachDefault(block: Node, indent = \"\") {\n        this.pushCode(indent + \"default\", \"\", \":\", block);\n        await this.attachBlockContents(block, indent + \"    \");\n        this.pushCode(indent + \"    \", \"break\", \";\", block);\n    }\n\n    /** <for statement=\"<statement>\"></for> */\n    private async attachFor(block: Node, indent = \"\") {\n        this.pushCode(indent + \"for (\", block.attributes.statement.value, \") {\", block);\n        await this.attachBlockContents(block, indent + \"    \");\n        this.pushCode(indent, \"\", \"}\", block);\n    }\n\n    /** <while condition=\"<condition>\"></while> */\n    private async attachWhile(block: Node, indent = \"\") {\n        this.pushCode(indent + \"while (\", block.attributes.condition.value, \") {\", block);\n        await this.attachBlockContents(block, indent + \"    \");\n        this.pushCode(indent, \"\", \"}\", block);\n    }\n\n    /** <do while=\"<condition>\"></do> */\n    private async attachDoWhile(block: Node, indent = \"\") {\n        this.pushCode(indent + \"do \", \"\", \" {\", block);\n        await this.attachBlockContents(block, indent + \"    \");\n        this.pushCode(indent + \"} while (\", block.attributes.while.value, \");\", block);\n    }\n}\n\nexport default Template;"],"sourceRoot":""}